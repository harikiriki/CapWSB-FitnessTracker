package com.capgemini.wsb.fitnesstracker.training.api;

import com.capgemini.wsb.fitnesstracker.training.internal.ActivityType;
import com.capgemini.wsb.fitnesstracker.user.api.User;
import jakarta.persistence.*;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.ToString;

import java.util.Date;

/**
 * Represents a training session performed by a user.
 * This class is mapped to the "trainings" table in the database and contains details of a specific training session,
 * including the user, start and end times, activity type, distance, and average speed.
 */
@Entity
@Table(name = "trainings")
@Getter
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@ToString
public class Training {

    /**
     * The unique identifier of the training session.
     * This field is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The user who performed the training session.
     * This field represents a many-to-one relationship with the User entity.
     */
    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    /**
     * The start time of the training session.
     * This field cannot be null and represents the beginning of the training.
     */
    @Column(name = "start_time", nullable = false)
    private Date startTime;

    /**
     * The end time of the training session.
     * This field cannot be null and represents the conclusion of the training.
     */
    @Column(name = "end_time", nullable = false)
    private Date endTime;

    /**
     * The type of activity performed during the training session.
     * This field cannot be null and is an enumerated value from ActivityType.
     */
    @Enumerated(EnumType.ORDINAL)
    @Column(name = "activity_type", nullable = false)
    private ActivityType activityType;

    /**
     * The distance covered during the training session, in kilometers or miles.
     * This field is optional and represents the distance of the activity.
     */
    @Column(name = "distance")
    private double distance;

    /**
     * The average speed during the training session, in kilometers per hour (km/h) or miles per hour (mph).
     * This field is optional and represents the average speed of the activity.
     */
    @Column(name = "average_speed")
    private double averageSpeed;

    /**
     * Constructs a new Training object with the specified parameters.
     *
     * @param user the user who performed the training
     * @param startTime the start time of the training session
     * @param endTime the end time of the training session
     * @param activityType the type of activity performed during the training
     * @param distance the distance covered during the training
     * @param averageSpeed the average speed during the training
     */
    public Training(
            final User user,
            final Date startTime,
            final Date endTime,
            final ActivityType activityType,
            final double distance,
            final double averageSpeed) {
        this.user = user;
        this.startTime = startTime;
        this.endTime = endTime;
        this.activityType = activityType;
        this.distance = distance;
        this.averageSpeed = averageSpeed;
    }

    /**
     * Updates the start time of the training session.
     *
     * @param startTime the new start time
     */
    public void updateStartTime(Date startTime) {
        this.startTime = startTime;
    }

    /**
     * Updates the end time of the training session.
     *
     * @param endTime the new end time
     */
    public void updateEndTime(Date endTime) {
        this.endTime = endTime;
    }

    /**
     * Updates the activity type of the training session.
     *
     * @param activityType the new activity type
     */
    public void updateActivityType(ActivityType activityType) {
        this.activityType = activityType;
    }

    /**
     * Updates the distance covered during the training session.
     *
     * @param distance the new distance
     */
    public void updateDistance(double distance) {
        this.distance = distance;
    }

    /**
     * Updates the average speed during the training session.
     *
     * @param averageSpeed the new average speed
     */
    public void updateAverageSpeed(double averageSpeed) {
        this.averageSpeed = averageSpeed;
    }

    /**
     * Sets the user associated with the training session.
     *
     * @param user the user performing the training
     */
    public void setUser(User user) {
        this.user = user;
    }
}
